#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

void swap(string *a, string *b){
    string temp = *a;
    *a = *b;
    *b = temp;
}

void OutPut(int size, string a[]) {
	for(int i = 0; i < size; i++)
		cout << a[i] << endl;
}

//HeapSort//////////////////////////////////////////////////////////////// 
void max_heapify(string arr[], int start, int end) {
    // 建立父節點指標和子節點指標
    int dad = start;
    int son = dad * 2 + 1;
    while (son <= end) { // 若子節點指標在範圍內才做比較
        if (son + 1 <= end && arr[son] < arr[son + 1]) // 先比較兩個子節點大小，選擇最大的
            son++;
        if (arr[dad] > arr[son]) // 如果父節點大於子節點代表調整完畢，直接跳出函數
            return;
        else { // 否則交換父子內容再繼續子節點和孫節點比較
            swap(arr[dad], arr[son]);
            dad = son;
            son = dad * 2 + 1;
        }
    }
}

void heap_sort(string arr[], int len) {
    // 初始化，i從最後一個父節點開始調整
    for (int i = len / 2 - 1; i >= 0; i--)
        max_heapify(arr, i, len - 1);
    // 先將第一個元素和已?排好的元素前一位做交換，再從新調整(??整的元素之前的元素)，直到排序完畢
    for (int i = len - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        max_heapify(arr, 0, i - 1);
    }
}

int Partition(string arr[], int front, int end){
    string pivot = arr[end];
    int i = front -1;
    for (int j = front; j < end; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    i++;
    swap(&arr[i], &arr[end]);
    return i;
}
void QuickSort(string arr[], int front, int end){
    if (front < end) {
        int pivot = Partition(arr, front, end);
        QuickSort(arr, front, pivot - 1);
        QuickSort(arr, pivot + 1, end);
    }
}


int conqure_IQS(string list[], int l, int r)
{
    string pivot = list[r];
    int i = l - 1;

    for(int j = l; j<r; j++)
        if(list[j] < pivot){
            i++;
            swap(list[i], list[j]);
        }
    
    swap(&list[i+1], &list[r]);
     
    return i+1;
}
void Iterative_QS(string list[], int n)
{
    if(n <= 0){
        printf("bad size!");
        exit(-1);
    }

    int stack[n];
    int top = -1;
    int l, r;

    l = 1, r = n;
    stack[++top] = l;
    stack[++top] = r;

    while(top >= 0){
        r = stack[top--];
        l = stack[top--];
		int p;
        p = conqure_IQS(list, l, r);

        if(p-1 > l){
            stack[++top] = l;
            stack[++top] = p-1;
        }

        if(p+1 < r){
            stack[++top] = p+1;
            stack[++top] = r;
        }
    }
}

void selection_sort(int size, string a[]);
void insertion_sort(int size, string a[]);
void bubble_sort(int size, string a[]);

int main(){
	srand(time(0));
	int pos, size;
	double start, end; //time counter
	char mode;
	string b = "abcdefghijklmnopqrstuvwxyz", d = "abcdef";
	
	/*測資 = 
	2000000
	4000000
	6000000
	8000000
	10000000
	*/ 
	int count  = 2;
	cout << "s = selection sort\n";
	cout << "i = insertion sort\n";
	cout << "b = bubblssse sort\n";
	cout << "1 = Interative QuickSort\n";
	cout << "2 = Recursive QuickSort\n";
	cout << "h = HeapSort\n\n";
	cout << "Cin Mode >> ";
	cin >> mode;
	cout << endl;
	cout << "Size = ";
	
	while(cin >> size) {

		
		
		string *e = new string [size];
		
		//int len = (int) sizeof(e) / sizeof(*e);
		
		for(int i = 0; i < size; i++) {
			for(int j = 0; j < 6; j++) {
				d[j] = b[(rand () % 26)];//在26個英文字園中隨機取一個
				//cout << d[j] << endl;
			}
			e[i] = d;
			//cout << "e[" << i << "] = " << e[i] << endl;
		}
	

	
		start=clock();
		switch(mode) {
			case 's':
				selection_sort(size, e);
				break;
			case 'i':
				insertion_sort(size, e);
				break;
			case 'b':
				bubble_sort(size, e);
				break;
			case '1':
				Iterative_QS(e, size - 1);
				break;
			case '2':
				QuickSort(e, 0, size - 1);
				break;
			case 'h':
				heap_sort(e, size);
				break;

		}
		cout << endl;
		//OutPut(size, e);
		end = clock();
		cout << "Cost " << (end - start) / CLOCKS_PER_SEC << " sec.";
		cout << endl << endl;
		cout << "Size: ";
	}

	return 0;
}
void selection_sort(int size, string a[]) {
	string temp = "abcdef";
	
	for(int i = 0; i < size; i++) {
		int pos = i;
		for(int j = i + 1; j < size; j++)
			if(a[j] < a[pos])
				pos = j;
			temp = a[i];
			a[i] = a[pos];
			a[pos] = temp;
	}
	//OutPut(size, a);
}

void insertion_sort(int size, string a[]) {
	string temp = "abcdef";
	
	for(int i = 1; i < size; i++){
  		temp = a[i];
   		int j;
   		for (j = i - 1; j >= 0 && temp < a[j]; j--)
       		a[j + 1] = a[j];
   		a[j + 1] = temp;
	}
	//OutPut(size, a);
}

void bubble_sort(int size, string a[]) {
	for(int i = 0; i < size - 1; i++) 
		for(int j = 0; j < size - 1 - i; j++) 
			if(a[j] > a[j + 1])
				swap(a[j], a[j + 1]);
	//OutPut(size, a);
}
