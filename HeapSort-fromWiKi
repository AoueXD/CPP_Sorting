#include <iostream>
#include <algorithm>
#include <ctime>

using namespace std;

void max_heapify(string arr[], int start, int end) {
    // 建立父節點指標和子節點指標
    int dad = start;
    int son = dad * 2 + 1;
    while (son <= end) { // 若子節點指標在範圍內才做比較
        if (son + 1 <= end && arr[son] < arr[son + 1]) // 先比較兩個子節點大小，選擇最大的
            son++;
        if (arr[dad] > arr[son]) // 如果父節點大於子節點代表調整完畢，直接跳出函數
            return;
        else { // 否則交換父子內容再繼續子節點和孫節點比較
            swap(arr[dad], arr[son]);
            dad = son;
            son = dad * 2 + 1;
        }
    }
}

void heap_sort(string arr[], int len) {
    // 初始化，i從最後一個父節點開始調整
    for (int i = len / 2 - 1; i >= 0; i--)
        max_heapify(arr, i, len - 1);
    // 先將第一個元素和已?排好的元素前一位做交換，再從新調整(??整的元素之前的元素)，直到排序完畢
    for (int i = len - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        max_heapify(arr, 0, i - 1);
    }
}

int main() {
	
	srand(time(0));
	
	int size;
	
	cin >> size;
	

    string b = "abcdefghijklmnopqrstuvwxyz", d = "abcdef";
    
    string *arr = new string[size];
    
    for(int i = 0; i < size; i++) {
    	for(int j = 0; j < 6; j++) 
    		d[j] = b[(rand() % 26)];
    	arr[i] = d;
    	cout << arr[i] << endl;
	}
		
    //int len = (int) sizeof(arr) / sizeof(*arr);
    
    heap_sort(arr, size);
    
    for (int i = 0; i < size; i++)
        cout << arr[i] << ' ';
        
    cout << endl;
    return 0;
}
